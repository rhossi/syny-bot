name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: syny
  EC2_HOST: ec2-35-175-139-57.compute-1.amazonaws.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ env.EC2_HOST }} "
          # Check if AWS CLI is installed
          if ! command -v aws &> /dev/null; then
            echo 'AWS CLI is not installed. Installing...'
            curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
            unzip awscliv2.zip
            sudo ./aws/install
          fi

          # Check if instance has IAM role
          if curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ -o /dev/null; then
            echo 'Instance has IAM role, using instance profile'
          else
            echo 'Instance does not have IAM role, configuring AWS CLI'
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}
          fi

          set -e

          # Add EC2 user to docker group
          sudo usermod -aG docker ubuntu
          
          # Reload the user's group assignments
          newgrp docker

          echo 'Logging in to Amazon ECR...'
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY &&
          
          echo 'Pulling the Docker image...'
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
          
          echo 'Stopping the existing container (if any)...'
          docker stop fastapi-container || true &&
          
          echo 'Removing the existing container (if any)...'
          docker rm fastapi-container || true &&
          
          echo 'Starting the new container...'
          docker run -d --name fastapi-container -p 80:8000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        "